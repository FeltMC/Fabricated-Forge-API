plugins {
	id "maven-publish"
	id "dev.architectury.loom" version "0.12.0-SNAPSHOT" apply false
	id 'java'
}

version = "0.0.1"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

archivesBaseName = project.archives_base_name
version = project.mod_version //+ "+" + (ENV.GITHUB_RUN_NUMBER ? "" : "local-") + getBranch()
group = project.maven_group

def gitHash() {
	String hash = System.getenv("GITHUB_SHA")
	if (hash != null) return hash.substring(0,10)
	return ""
}

subprojects {
	apply plugin: "maven-publish"
	apply plugin: "dev.architectury.loom"

	version = "${project.module_version}-${project.minecraft_version}"
	if (System.getenv("GITHUB_COMMIT_PUBLISH")){
		version = gitHash() + "-${project.minecraft_version}"
	}
	group = rootProject.maven_group
	if (project.hasProperty("archive_base_name")){
		archivesBaseName = project.archive_base_name
	}

	repositories {
		// Add repositories to retrieve artifacts from in here.
		// You should only use this when depending on other mods because
		// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
		// See https://docs.gradle.org/current/userguide/declaring_repositories.html
		// for more information about repositories.
		maven {
			url "https://maven.terraformersmc.com"
			content {
				includeGroup "com.terraformersmc"
			}
		}
		maven {
			name = "parchment"
			url = uri("https://maven.parchmentmc.org")
		}
		maven { url 'https://jitpack.io' }
	}

	dependencies {
		minecraft "com.mojang:minecraft:${project.minecraft_version}"
		if(project.mojmap.toBoolean()){
			mappings loom.layered() {
				officialMojangMappings()
				parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}@zip")
			}
		} else {
			mappings "net.fabricmc:yarn:${project.minecraft_version}+${project.yarn_mappings}:v2"
		}
		if (!project.hasProperty("is_forge")){
			modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
			// Fabric API. This is technically optional, but you probably want it anyway.
			modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}+${project.minecraft_version}"
		} else {
			forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
		}
		//testmodImplementation sourceSets.main.output
	}

	java {
		withSourcesJar()
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				artifact(remapJar) {
					builtBy(remapJar)
				}

				artifact(remapSourcesJar) {
					builtBy remapSourcesJar
				}
			}
		}

		setupRepositories(repositories)
	}

	processResources {
		//dependsOn copyAccessWidener

		def toReplace = [
				"version"             : project.version
		]

		inputs.properties toReplace
		filesMatching("fabric.mod.json") {
			expand toReplace
		}
		filesMatching("META-INF/mods.toml") {
			expand toReplace
		}
	}
}

void setupRepositories(RepositoryHandler repositories) {
	//repositories.mavenLocal() // uncomment for testing
	def ENV = System.getenv()
	repositories.maven {
		url "https://repo.repsy.io/mvn/distant/feltmc"
		if (ENV.GITHUB_ACTION) {
			credentials {
				username ENV.MAVEN_USERNAME
				password ENV.MAVEN_PASSWORD
			}
		}
	}
}

allprojects {
	apply plugin: "java"



	group = rootProject.maven_group

	repositories {
		maven {
			name = 'parchment'
			url = 'https://maven.parchmentmc.org'
		}
	}

	tasks.withType(JavaCompile).configureEach {
		it.options.encoding = 'UTF-8'
	}
}

/*sourceSets {
	testmod
}


dependencies {
	afterEvaluate {
		subprojects.each {
			api project(path: ":${it.name}", configuration: "namedElements")

			testmodImplementation project("${it.name}:").sourceSets.testmod.output
		}
	}
}*/
