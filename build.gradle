plugins {
	id "maven-publish"
	id "fabric-loom" version "0.12-SNAPSHOT" apply false
}

version = "0.0.1"

def getSubprojectVersion(project) {
	// Get the version from the gradle.properties file
	def version = project.properties["${project.name}-version"]

	if (!version) {
		throw new NullPointerException("Could not find version for " + project.name)
	}

	return version
}

subprojects {
	apply plugin: "maven-publish"
	apply plugin: "fabric-loom"
	java.toolchain.languageVersion = JavaLanguageVersion.of(17)


	dependencies {
		minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
		mappings loom.layered() {
			officialMojangMappings()
			parchment("org.parchmentmc.data:parchment-${rootProject.minecraft_version}:${rootProject.parchment_mappings}@zip")
		}
		//TODO remap to yarn?
		//mappings "net.fabricmc:yarn:${rootProject.minecraft_version}${project.yarn_version}:v2"
		modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
		modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
		//testmodImplementation sourceSets.main.output
	}

	java {
		withSourcesJar()
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				artifact(remapJar) {
					builtBy(remapJar)
				}

				artifact(remapSourcesJar) {
					builtBy remapSourcesJar
				}
			}
		}

		setupRepositories(repositories)
	}

	processResources {
		//dependsOn copyAccessWidener

		def toReplace = [
				"version"             : project.version
		]

		inputs.properties toReplace
		filesMatching("fabric.mod.json") {
			expand toReplace
		}
	}
}

void setupRepositories(RepositoryHandler repositories) {
	//repositories.mavenLocal() // uncomment for testing
	def ENV = System.getenv()
	repositories.maven {
		url "https://repo.repsy.io/mvn/distant/feltmc"
		if (ENV.MAVEN_PUBLISH_USERNAME) {
			credentials {
				username ENV.MAVEN_PUBLISH_USERNAME
				password ENV.MAVEN_PUBLISH_TOKEN
			}
		}
	}
}

allprojects {
	apply plugin: "java"



	group = rootProject.maven_group

	repositories {
		maven {
			name = 'parchment'
			url = 'https://maven.parchmentmc.org'
		}
		maven { url 'https://jitpack.io' }
	}

	tasks.withType(JavaCompile).configureEach {
		it.options.encoding = 'UTF-8'
	}
}

/*sourceSets {
	testmod
}


dependencies {
	afterEvaluate {
		subprojects.each {
			api project(path: ":${it.name}", configuration: "namedElements")

			testmodImplementation project("${it.name}:").sourceSets.testmod.output
		}
	}
}*/
